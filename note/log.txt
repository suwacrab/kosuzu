essentially, this program is meant for saving trees of data into a single file
on the filesystem.

said files should be able to get easily read by any C/C++ program.
along with being used for save data, it should also be usable for general-
purpose file archival. a bit like the final evolution of the miniarc libraries
that've been getting remade until this point.

-- Basics -------------------------------------------------------------------@/
an archive consists of 4 main parts:
	-	header section
	-	node section
	-	tree section
	-	data section

each node has:
	-	a hashed name (u32)
	-	type of their data
	*	additional data that depends on the type

nodes can be of 4 types:
	*	integer (32-bit signed) & integer (32-bit unsigned)
		-	value
	*	userdata (variable size)
		-	pointer in data section
		-	size of the data in bytes
	*	folder
		-	index in the tree section of where the folder's blocks are
			*	from there, each block is an index in the node section.
		-	number of blocks in the folder

-- writing to a file --------------------------------------------------------@/
there is a root folder (root\) that everything descends from. this will always
be in every archive as the very first node in each file.
after a list of folders is generated, each folder gets a corresponding block
array, which is essentially just an array of each folder's children. to add
children to each block array, the following is done:
	-	loop through each entry
		*	if the folder the entry belongs to is not found, then an error's
			produced.
		*	if the folder is found, the block is added to the folder's block
			array.

after all blocks get their corresponding folders, they're then finally
written to the disk.

as for the user, they must submit an array of KOSUZU_SAVEENTRY structures,
with each essentially dictating what each node should be, what file they
should be read from, etc.

-- 2023/04/11 ---------------------------------------------------------------@/
beginning.

-- 2023/04/12 ---------------------------------------------------------------@/
first functional version.
	*	can read & write .ksz files
	*	not much else other than that	

-- 2023/04/13 ---------------------------------------------------------------@/
integer handling should be functional (also, KOSUZU_NODE_INVALID is used for
invalid node indices rather than a hardcoded -1)

-- 2023/04/15 ---------------------------------------------------------------@/
KOSUZU_NODE is used on the client's side of things, now. KOSUZU_FILENODE is
only used while loading & saving nodes.
next main goal should be to make saving easier from the C++ side: manually
writing structs could be replaced with a simple stack structure that adds
entries to a list.

-- 2023/04/26 ---------------------------------------------------------------@/
entry writing's much better now; don't even think having to write a C++
equivalent'll be needed considering how easy it is to do it in C.
maybe it's about time to finally put the library to use, all the essentials
are done now.

BUT, one slightly-notable change has to be made, now: all entries' data is now
aligned.
would've probably been easier if i designed the library with that in mind from
the beginning...

